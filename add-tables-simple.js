// Script simple pour ajouter les tables WhatsApp
const { PrismaClient } = require('@prisma/client');

async function addTables() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üöÄ Ajout des tables WhatsApp...\n');
    
    // Requ√™tes SQL simples √† ex√©cuter une par une
    const queries = [
      // 1. Cr√©er table OtpChallenge
      `CREATE TABLE IF NOT EXISTS "OtpChallenge" (
        "id" TEXT NOT NULL,
        "userId" TEXT,
        "phoneE164" TEXT NOT NULL,
        "codeHash" TEXT NOT NULL,
        "purpose" TEXT NOT NULL DEFAULT 'LOGIN',
        "consumed" BOOLEAN NOT NULL DEFAULT false,
        "expiresAt" TIMESTAMP(3) NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "OtpChallenge_pkey" PRIMARY KEY ("id")
      )`,
      
      // 2. Cr√©er table CreditLedger
      `CREATE TABLE IF NOT EXISTS "CreditLedger" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "delta" INTEGER NOT NULL,
        "reason" TEXT NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "CreditLedger_pkey" PRIMARY KEY ("id")
      )`,
      
      // 3. Ajouter colonnes WhatsApp √† User
      `ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "waPhoneE164" TEXT`,
      `ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "waUserId" TEXT`,
      `ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "waLinkedAt" TIMESTAMP(3)`,
      `ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "waPreferredLang" TEXT DEFAULT 'fr'`,
      `ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "credits" INTEGER DEFAULT 5`,
      `ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "updatedAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP`,
      
      // 4. Modifier contraintes User
      `ALTER TABLE "User" ALTER COLUMN "email" DROP NOT NULL`,
      `ALTER TABLE "User" ALTER COLUMN "passwordHash" DROP NOT NULL`,
    ];
    
    // Ex√©cuter les requ√™tes
    for (let i = 0; i < queries.length; i++) {
      try {
        console.log(`‚è≥ Ex√©cution requ√™te ${i + 1}/${queries.length}...`);
        await prisma.$executeRawUnsafe(queries[i]);
        console.log(`‚úÖ Requ√™te ${i + 1} ex√©cut√©e avec succ√®s`);
      } catch (error) {
        if (error.message.includes('already exists') || 
            error.message.includes('does not exist') ||
            error.message.includes('duplicate key')) {
          console.log(`‚ö†Ô∏è Requ√™te ${i + 1} ignor√©e (d√©j√† existant ou non applicable)`);
        } else {
          console.error(`‚ùå Erreur requ√™te ${i + 1}:`, error.message);
        }
      }
    }
    
    // Ajouter les contraintes de cl√©s √©trang√®res
    console.log('\nüîó Ajout des contraintes de cl√©s √©trang√®res...');
    
    const foreignKeys = [
      `ALTER TABLE "OtpChallenge" ADD CONSTRAINT IF NOT EXISTS "OtpChallenge_userId_fkey" 
       FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE SET NULL ON UPDATE CASCADE`,
      `ALTER TABLE "CreditLedger" ADD CONSTRAINT IF NOT EXISTS "CreditLedger_userId_fkey" 
       FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE`
    ];
    
    for (const fk of foreignKeys) {
      try {
        await prisma.$executeRawUnsafe(fk);
        console.log('‚úÖ Contrainte ajout√©e');
      } catch (error) {
        console.log('‚ö†Ô∏è Contrainte d√©j√† existante');
      }
    }
    
    // Ajouter les index
    console.log('\nüìä Ajout des index...');
    
    const indexes = [
      `CREATE INDEX IF NOT EXISTS "OtpChallenge_phoneE164_consumed_expiresAt_idx" 
       ON "OtpChallenge"("phoneE164", "consumed", "expiresAt")`,
      `CREATE INDEX IF NOT EXISTS "OtpChallenge_userId_consumed_idx" 
       ON "OtpChallenge"("userId", "consumed")`,
      `CREATE INDEX IF NOT EXISTS "CreditLedger_userId_createdAt_idx" 
       ON "CreditLedger"("userId", "createdAt")`,
      `CREATE INDEX IF NOT EXISTS "CreditLedger_reason_createdAt_idx" 
       ON "CreditLedger"("reason", "createdAt")`,
      `CREATE UNIQUE INDEX IF NOT EXISTS "User_waPhoneE164_key" 
       ON "User"("waPhoneE164") WHERE "waPhoneE164" IS NOT NULL`,
      `CREATE UNIQUE INDEX IF NOT EXISTS "User_waUserId_key" 
       ON "User"("waUserId") WHERE "waUserId" IS NOT NULL`,
      `CREATE INDEX IF NOT EXISTS "User_waPhoneE164_idx" ON "User"("waPhoneE164")`,
      `CREATE INDEX IF NOT EXISTS "User_waUserId_idx" ON "User"("waUserId")`
    ];
    
    for (const index of indexes) {
      try {
        await prisma.$executeRawUnsafe(index);
        console.log('‚úÖ Index ajout√©');
      } catch (error) {
        console.log('‚ö†Ô∏è Index d√©j√† existant');
      }
    }
    
    console.log('\nüéâ Tables WhatsApp ajout√©es avec succ√®s !');
    
    // V√©rifier les tables
    console.log('\nüîç V√©rification finale...');
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name;
    `;
    
    console.log('üìã Tables dans la base:');
    tables.forEach(table => {
      console.log(`  ‚úÖ ${table.table_name}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

addTables();
