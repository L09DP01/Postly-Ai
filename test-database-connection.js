#!/usr/bin/env node

// Test simple de connexion √† la base de donn√©es
const { PrismaClient } = require('@prisma/client');

async function testDatabaseConnection() {
  const prisma = new PrismaClient();

  try {
    console.log('üîç Test de connexion √† la base de donn√©es...');

    // Test 1: V√©rifier si on peut cr√©er un OtpChallenge
    console.log('üß™ Test: Cr√©ation d\'un OtpChallenge...');
    try {
      const testOtp = await prisma.otpChallenge.create({
        data: {
          phoneE164: '+1234567890',
          codeHash: 'test-hash',
          purpose: 'LOGIN',
          expiresAt: new Date(Date.now() + 10 * 60 * 1000)
        }
      });
      console.log('‚úÖ SUCC√àS: OtpChallenge cr√©√© !');
      await prisma.otpChallenge.delete({ where: { id: testOtp.id } });
      
    } catch (error) {
      if (error.message.includes('OtpPurpose')) {
        console.log('‚ùå PROBL√àME CONFIRM√â: L\'enum OtpPurpose n\'existe pas');
        console.log('üîß SOLUTION: Ex√©cuter le SQL sur Supabase pour cr√©er l\'enum');
      } else {
        console.log('‚ùå AUTRE ERREUR:', error.message);
      }
    }

  } catch (error) {
    console.error('üí• Erreur g√©n√©rale:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testDatabaseConnection();
